[0m[1mdata.yandex_compute_image.ubuntu-db: Reading...[0m[0m
[0m[1mdata.yandex_compute_image.ubuntu-db: Read complete after 0s [id=fd8snjpoq85qqv0mk9gi][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # yandex_compute_instance.vm-each["0"][0m will be created
[0m  [32m+[0m[0m resource "yandex_compute_instance" "vm-each" {
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m folder_id                 = (known after apply)
      [32m+[0m[0m fqdn                      = (known after apply)
      [32m+[0m[0m gpu_cluster_id            = (known after apply)
      [32m+[0m[0m hostname                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m metadata                  = {
          [32m+[0m[0m "serial-port-enable" = "1"
          [32m+[0m[0m "ssh-keys"           = <<-EOT
                ubuntu:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPdBVvVCdO0xTMIigG5JCKE7mQjeoeuT1RBdqsB7Cl+w vit@vit-virtual-machine
            EOT
        }
      [32m+[0m[0m name                      = "platform-web"
      [32m+[0m[0m network_acceleration_type = "standard"
      [32m+[0m[0m platform_id               = "standard-v1"
      [32m+[0m[0m service_account_id        = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m zone                      = (known after apply)

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete = true
          [32m+[0m[0m device_name = (known after apply)
          [32m+[0m[0m disk_id     = (known after apply)
          [32m+[0m[0m mode        = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m block_size  = (known after apply)
              [32m+[0m[0m description = (known after apply)
              [32m+[0m[0m image_id    = "fd8snjpoq85qqv0mk9gi"
              [32m+[0m[0m name        = (known after apply)
              [32m+[0m[0m size        = 10
              [32m+[0m[0m snapshot_id = (known after apply)
              [32m+[0m[0m type        = "network-hdd"
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m index              = (known after apply)
          [32m+[0m[0m ip_address         = (known after apply)
          [32m+[0m[0m ipv4               = true
          [32m+[0m[0m ipv6               = (known after apply)
          [32m+[0m[0m ipv6_address       = (known after apply)
          [32m+[0m[0m mac_address        = (known after apply)
          [32m+[0m[0m nat                = true
          [32m+[0m[0m nat_ip_address     = (known after apply)
          [32m+[0m[0m nat_ip_version     = (known after apply)
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnet_id          = (known after apply)
        }

      [32m+[0m[0m resources {
          [32m+[0m[0m core_fraction = 5
          [32m+[0m[0m cores         = 2
          [32m+[0m[0m memory        = 1
        }

      [32m+[0m[0m scheduling_policy {
          [32m+[0m[0m preemptible = true
        }
    }

[1m  # yandex_compute_instance.vm-each["1"][0m will be created
[0m  [32m+[0m[0m resource "yandex_compute_instance" "vm-each" {
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m folder_id                 = (known after apply)
      [32m+[0m[0m fqdn                      = (known after apply)
      [32m+[0m[0m gpu_cluster_id            = (known after apply)
      [32m+[0m[0m hostname                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m metadata                  = {
          [32m+[0m[0m "serial-port-enable" = "1"
          [32m+[0m[0m "ssh-keys"           = <<-EOT
                ubuntu:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPdBVvVCdO0xTMIigG5JCKE7mQjeoeuT1RBdqsB7Cl+w vit@vit-virtual-machine
            EOT
        }
      [32m+[0m[0m name                      = "platform-db"
      [32m+[0m[0m network_acceleration_type = "standard"
      [32m+[0m[0m platform_id               = "standard-v1"
      [32m+[0m[0m service_account_id        = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m zone                      = (known after apply)

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete = true
          [32m+[0m[0m device_name = (known after apply)
          [32m+[0m[0m disk_id     = (known after apply)
          [32m+[0m[0m mode        = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m block_size  = (known after apply)
              [32m+[0m[0m description = (known after apply)
              [32m+[0m[0m image_id    = "fd8snjpoq85qqv0mk9gi"
              [32m+[0m[0m name        = (known after apply)
              [32m+[0m[0m size        = 10
              [32m+[0m[0m snapshot_id = (known after apply)
              [32m+[0m[0m type        = "network-hdd"
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m index              = (known after apply)
          [32m+[0m[0m ip_address         = (known after apply)
          [32m+[0m[0m ipv4               = true
          [32m+[0m[0m ipv6               = (known after apply)
          [32m+[0m[0m ipv6_address       = (known after apply)
          [32m+[0m[0m mac_address        = (known after apply)
          [32m+[0m[0m nat                = true
          [32m+[0m[0m nat_ip_address     = (known after apply)
          [32m+[0m[0m nat_ip_version     = (known after apply)
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnet_id          = (known after apply)
        }

      [32m+[0m[0m resources {
          [32m+[0m[0m core_fraction = 5
          [32m+[0m[0m cores         = 4
          [32m+[0m[0m memory        = 2
        }

      [32m+[0m[0m scheduling_policy {
          [32m+[0m[0m preemptible = true
        }
    }

[1m  # yandex_compute_instance.web[0][0m will be created
[0m  [32m+[0m[0m resource "yandex_compute_instance" "web" {
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m folder_id                 = (known after apply)
      [32m+[0m[0m fqdn                      = (known after apply)
      [32m+[0m[0m gpu_cluster_id            = (known after apply)
      [32m+[0m[0m hostname                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m metadata                  = {
          [32m+[0m[0m "serial-port-enable" = "1"
          [32m+[0m[0m "ssh-keys"           = <<-EOT
                ubuntu:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPdBVvVCdO0xTMIigG5JCKE7mQjeoeuT1RBdqsB7Cl+w vit@vit-virtual-machine
            EOT
        }
      [32m+[0m[0m name                      = "netology-develop-platform-web-0"
      [32m+[0m[0m network_acceleration_type = "standard"
      [32m+[0m[0m platform_id               = "standard-v1"
      [32m+[0m[0m service_account_id        = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m zone                      = (known after apply)

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete = true
          [32m+[0m[0m device_name = (known after apply)
          [32m+[0m[0m disk_id     = (known after apply)
          [32m+[0m[0m mode        = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m block_size  = (known after apply)
              [32m+[0m[0m description = (known after apply)
              [32m+[0m[0m image_id    = "fd8snjpoq85qqv0mk9gi"
              [32m+[0m[0m name        = (known after apply)
              [32m+[0m[0m size        = 5
              [32m+[0m[0m snapshot_id = (known after apply)
              [32m+[0m[0m type        = "network-hdd"
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m index              = (known after apply)
          [32m+[0m[0m ip_address         = (known after apply)
          [32m+[0m[0m ipv4               = true
          [32m+[0m[0m ipv6               = (known after apply)
          [32m+[0m[0m ipv6_address       = (known after apply)
          [32m+[0m[0m mac_address        = (known after apply)
          [32m+[0m[0m nat                = true
          [32m+[0m[0m nat_ip_address     = (known after apply)
          [32m+[0m[0m nat_ip_version     = (known after apply)
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnet_id          = (known after apply)
        }

      [32m+[0m[0m resources {
          [32m+[0m[0m core_fraction = 5
          [32m+[0m[0m cores         = 2
          [32m+[0m[0m memory        = 2
        }

      [32m+[0m[0m scheduling_policy {
          [32m+[0m[0m preemptible = true
        }
    }

[1m  # yandex_compute_instance.web[1][0m will be created
[0m  [32m+[0m[0m resource "yandex_compute_instance" "web" {
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m folder_id                 = (known after apply)
      [32m+[0m[0m fqdn                      = (known after apply)
      [32m+[0m[0m gpu_cluster_id            = (known after apply)
      [32m+[0m[0m hostname                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m metadata                  = {
          [32m+[0m[0m "serial-port-enable" = "1"
          [32m+[0m[0m "ssh-keys"           = <<-EOT
                ubuntu:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPdBVvVCdO0xTMIigG5JCKE7mQjeoeuT1RBdqsB7Cl+w vit@vit-virtual-machine
            EOT
        }
      [32m+[0m[0m name                      = "netology-develop-platform-web-1"
      [32m+[0m[0m network_acceleration_type = "standard"
      [32m+[0m[0m platform_id               = "standard-v1"
      [32m+[0m[0m service_account_id        = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m zone                      = (known after apply)

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete = true
          [32m+[0m[0m device_name = (known after apply)
          [32m+[0m[0m disk_id     = (known after apply)
          [32m+[0m[0m mode        = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m block_size  = (known after apply)
              [32m+[0m[0m description = (known after apply)
              [32m+[0m[0m image_id    = "fd8snjpoq85qqv0mk9gi"
              [32m+[0m[0m name        = (known after apply)
              [32m+[0m[0m size        = 5
              [32m+[0m[0m snapshot_id = (known after apply)
              [32m+[0m[0m type        = "network-hdd"
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m index              = (known after apply)
          [32m+[0m[0m ip_address         = (known after apply)
          [32m+[0m[0m ipv4               = true
          [32m+[0m[0m ipv6               = (known after apply)
          [32m+[0m[0m ipv6_address       = (known after apply)
          [32m+[0m[0m mac_address        = (known after apply)
          [32m+[0m[0m nat                = true
          [32m+[0m[0m nat_ip_address     = (known after apply)
          [32m+[0m[0m nat_ip_version     = (known after apply)
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnet_id          = (known after apply)
        }

      [32m+[0m[0m resources {
          [32m+[0m[0m core_fraction = 5
          [32m+[0m[0m cores         = 2
          [32m+[0m[0m memory        = 2
        }

      [32m+[0m[0m scheduling_policy {
          [32m+[0m[0m preemptible = true
        }
    }

[1m  # yandex_vpc_network.develop[0m will be created
[0m  [32m+[0m[0m resource "yandex_vpc_network" "develop" {
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m default_security_group_id = (known after apply)
      [32m+[0m[0m folder_id                 = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m labels                    = (known after apply)
      [32m+[0m[0m name                      = "develop"
      [32m+[0m[0m subnet_ids                = (known after apply)
    }

[1m  # yandex_vpc_security_group.example[0m will be created
[0m  [32m+[0m[0m resource "yandex_vpc_security_group" "example" {
      [32m+[0m[0m created_at = (known after apply)
      [32m+[0m[0m folder_id  = "b1ge21a1um8g6t7jqndj"
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m labels     = (known after apply)
      [32m+[0m[0m name       = "example_dynamic"
      [32m+[0m[0m network_id = (known after apply)
      [32m+[0m[0m status     = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m description    = "разрешить весь исходящий трафик"
          [32m+[0m[0m from_port      = 0
          [32m+[0m[0m id             = (known after apply)
          [32m+[0m[0m labels         = (known after apply)
          [32m+[0m[0m port           = -1
          [32m+[0m[0m protocol       = "TCP"
          [32m+[0m[0m to_port        = 65365
          [32m+[0m[0m v4_cidr_blocks = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m v6_cidr_blocks = []
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m description    = "разрешить входящий  http"
          [32m+[0m[0m from_port      = -1
          [32m+[0m[0m id             = (known after apply)
          [32m+[0m[0m labels         = (known after apply)
          [32m+[0m[0m port           = 80
          [32m+[0m[0m protocol       = "TCP"
          [32m+[0m[0m to_port        = -1
          [32m+[0m[0m v4_cidr_blocks = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m v6_cidr_blocks = []
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m description    = "разрешить входящий https"
          [32m+[0m[0m from_port      = -1
          [32m+[0m[0m id             = (known after apply)
          [32m+[0m[0m labels         = (known after apply)
          [32m+[0m[0m port           = 443
          [32m+[0m[0m protocol       = "TCP"
          [32m+[0m[0m to_port        = -1
          [32m+[0m[0m v4_cidr_blocks = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m v6_cidr_blocks = []
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m description    = "разрешить входящий ssh"
          [32m+[0m[0m from_port      = -1
          [32m+[0m[0m id             = (known after apply)
          [32m+[0m[0m labels         = (known after apply)
          [32m+[0m[0m port           = 22
          [32m+[0m[0m protocol       = "TCP"
          [32m+[0m[0m to_port        = -1
          [32m+[0m[0m v4_cidr_blocks = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m v6_cidr_blocks = []
        }
    }

[1m  # yandex_vpc_subnet.develop[0m will be created
[0m  [32m+[0m[0m resource "yandex_vpc_subnet" "develop" {
      [32m+[0m[0m created_at     = (known after apply)
      [32m+[0m[0m folder_id      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m labels         = (known after apply)
      [32m+[0m[0m name           = "develop"
      [32m+[0m[0m network_id     = (known after apply)
      [32m+[0m[0m v4_cidr_blocks = [
          [32m+[0m[0m "10.0.1.0/24",
        ]
      [32m+[0m[0m v6_cidr_blocks = (known after apply)
      [32m+[0m[0m zone           = "ru-central1-a"
    }

[1mPlan:[0m 7 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
